"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–í–µ—Ä—Å–∏—è 2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import sys
import os
import warnings
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
from datetime import datetime
import json
import numpy as np

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings.filterwarnings("ignore")
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

try:
    from interface import CryptoPredictorInterface
    from config import (
        CRYPTO_SYMBOLS, MACRO_INDICATORS, DATA_PERIODS, 
        FORECAST_HORIZONS, UI_DESCRIPTIONS, PRESET_STRATEGIES,
        MODEL_SPECIFIC_CONFIG
    )
    from utils import Logger, create_project_structure
    from feature_engineering import AdvancedFeatureEngineering
except ImportError as e:
    messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏:\n{e}")
    sys.exit(1)


class CryptoGUI:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç v2.0")
        self.root.geometry("1200x800")
        
        # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.root.iconbitmap("icon.ico")
        except:
            pass

        # –°—Ç–∏–ª–∏
        self.setup_styles()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_cryptos = []
        self.selected_models = []
        self.selected_macros = []
        self.feature_options = {}
        self.interface = CryptoPredictorInterface()
        self.is_running = False
        self.current_strategy = None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_last_settings()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use("clam")

        # –¶–≤–µ—Ç–∞
        bg_color = "#f0f0f0"
        accent_color = "#2196F3"
        success_color = "#4CAF50"
        warning_color = "#FF9800"
        error_color = "#F44336"

        self.root.configure(bg=bg_color)

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure(
            "Accent.TButton",
            background=accent_color,
            foreground="white",
            borderwidth=0,
            focuscolor="none",
            font=("Arial", 10, "bold"),
        )
        style.map("Accent.TButton", background=[("active", "#1976D2")])
        
        style.configure(
            "Success.TButton",
            background=success_color,
            foreground="white",
            borderwidth=0,
            font=("Arial", 10, "bold"),
        )
        
        style.configure(
            "Warning.TButton",
            background=warning_color,
            foreground="white",
            borderwidth=0,
            font=("Arial", 10, "bold"),
        )

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.main_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.main_tab, text="üè† –ì–ª–∞–≤–Ω–∞—è")
        self.create_main_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–µ–π
        self.models_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.models_tab, text="ü§ñ –ú–æ–¥–µ–ª–∏")
        self.create_models_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.features_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.features_tab, text="üõ†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫–∏")
        self.create_features_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.results_tab, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.create_results_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        self.forecast_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.forecast_tab, text="üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã")
        self.create_forecast_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()

    def create_main_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.main_tab,
            text="üöÄ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç v2.0",
            font=("Arial", 18, "bold"),
            bg="#2196F3",
            fg="white",
            pady=15,
        )
        header.pack(fill=tk.X)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.main_tab, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –¢—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
        left_frame = ttk.Frame(main_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        middle_frame = ttk.Frame(main_frame)
        middle_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)
        
        right_frame = ttk.Frame(main_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        self.create_crypto_section(left_frame)
        
        # –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.create_macro_section(middle_frame)
        self.create_params_section(middle_frame)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.create_strategy_section(right_frame)
        self.create_control_buttons(right_frame)
        
        # –ö–æ–Ω—Å–æ–ª—å –≤–Ω–∏–∑—É
        self.create_console(main_frame)

    def create_crypto_section(self, parent):
        """–°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        frame = ttk.LabelFrame(parent, text="üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", padding="10")
        frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(frame)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(search_frame, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        self.crypto_search = ttk.Entry(search_frame)
        self.crypto_search.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        self.crypto_search.bind("<KeyRelease>", self.filter_cryptos)

        # –°–ø–∏—Å–æ–∫ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –≤ scrollable frame
        canvas = tk.Canvas(frame, height=200)
        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        self.crypto_vars = {}
        self.crypto_checkboxes = {}
        for crypto in CRYPTO_SYMBOLS.keys():
            var = tk.BooleanVar()
            cb = ttk.Checkbutton(scrollable_frame, text=crypto, variable=var)
            cb.pack(anchor=tk.W, pady=2)
            self.crypto_vars[crypto] = var
            self.crypto_checkboxes[crypto] = cb
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
        btn_frame = ttk.Frame(frame)
        btn_frame.pack(fill=tk.X, pady=(10, 0))

        ttk.Button(
            btn_frame,
            text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            command=lambda: self.select_all(self.crypto_vars),
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            btn_frame,
            text="–°–Ω—è—Ç—å –≤—Å–µ",
            command=lambda: self.deselect_all(self.crypto_vars),
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            btn_frame,
            text="–¢–æ–ø-5",
            command=self.select_top_cryptos,
        ).pack(side=tk.LEFT, padx=2)

    def create_models_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–µ–π"""
        main_frame = ttk.Frame(self.models_tab, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
        models_frame = ttk.LabelFrame(main_frame, text="ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π", padding="10")
        models_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        self.model_vars = {}
        
        # –°–æ–∑–¥–∞–µ–º frame –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        for model, description in UI_DESCRIPTIONS["models"].items():
            model_frame = ttk.Frame(models_frame)
            model_frame.pack(fill=tk.X, pady=5)
            
            var = tk.BooleanVar(value=model in ["LSTM", "GRU"])
            self.model_vars[model] = var
            
            cb = ttk.Checkbutton(
                model_frame,
                text=model,
                variable=var,
                command=lambda m=model: self.update_model_info(m)
            )
            cb.pack(side=tk.LEFT)
            
            ttk.Label(
                model_frame,
                text=f" - {description}",
                font=("Arial", 9),
                foreground="gray"
            ).pack(side=tk.LEFT, padx=(10, 0))
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–æ–¥–µ–ª–∏
            ttk.Button(
                model_frame,
                text="‚öôÔ∏è",
                width=3,
                command=lambda m=model: self.configure_model(m)
            ).pack(side=tk.RIGHT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.pack(fill=tk.BOTH, expand=True)
        
        self.model_info_text = scrolledtext.ScrolledText(
            info_frame,
            height=10,
            wrap=tk.WORD,
            font=("Consolas", 9)
        )
        self.model_info_text.pack(fill=tk.BOTH, expand=True)
        
        self.update_model_info()

    def create_features_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        main_frame = ttk.Frame(self.features_tab, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        basic_frame = ttk.LabelFrame(main_frame, text="üìä –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", padding="10")
        basic_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(basic_frame, text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é").pack()
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        advanced_frame = ttk.LabelFrame(main_frame, text="üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", padding="10")
        advanced_frame.pack(fill=tk.BOTH, expand=True)
        
        self.feature_vars = {}
        
        for feature, description in UI_DESCRIPTIONS["features"].items():
            feature_frame = ttk.Frame(advanced_frame)
            feature_frame.pack(fill=tk.X, pady=5)
            
            var = tk.BooleanVar(value=True)
            self.feature_vars[f"use_{feature}"] = var
            
            cb = ttk.Checkbutton(
                feature_frame,
                text=description,
                variable=var
            )
            cb.pack(side=tk.LEFT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        processing_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", padding="10")
        processing_frame.pack(fill=tk.X, pady=(10, 0))
        
        # PCA
        pca_frame = ttk.Frame(processing_frame)
        pca_frame.pack(fill=tk.X, pady=5)
        
        self.use_pca = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            pca_frame,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PCA",
            variable=self.use_pca
        ).pack(side=tk.LEFT)
        
        ttk.Label(pca_frame, text="–î–∏—Å–ø–µ—Ä—Å–∏—è:").pack(side=tk.LEFT, padx=(20, 5))
        self.pca_variance = tk.DoubleVar(value=0.95)
        pca_spin = ttk.Spinbox(
            pca_frame,
            from_=0.8,
            to=0.99,
            increment=0.01,
            textvariable=self.pca_variance,
            width=10
        )
        pca_spin.pack(side=tk.LEFT)
        
        # –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        selection_frame = ttk.Frame(processing_frame)
        selection_frame.pack(fill=tk.X, pady=5)
        
        self.use_selection = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            selection_frame,
            text="–û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            variable=self.use_selection
        ).pack(side=tk.LEFT)
        
        ttk.Label(selection_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(side=tk.LEFT, padx=(20, 5))
        self.n_features = tk.IntVar(value=100)
        selection_spin = ttk.Spinbox(
            selection_frame,
            from_=50,
            to=200,
            increment=10,
            textvariable=self.n_features,
            width=10
        )
        selection_spin.pack(side=tk.LEFT)

    def create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        main_frame = ttk.Frame(self.results_tab, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(
            control_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.refresh_results
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            control_frame,
            text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            command=self.show_detailed_analysis
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            control_frame,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self.export_results
        ).pack(side=tk.LEFT, padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–ú–æ–¥–µ–ª—å", "RMSE", "MAE", "R¬≤", "–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        self.results_tree = ttk.Treeview(main_frame, columns=columns, show="headings", height=15)
        
        for col in columns:
            self.results_tree.heading(col, text=col)
            self.results_tree.column(col, width=120)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=self.results_tree.yview)
        self.results_tree.configure(yscrollcommand=scrollbar.set)
        
        self.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°–≤–æ–¥–∫–∞ –≤–Ω–∏–∑—É
        summary_frame = ttk.LabelFrame(main_frame, text="üìã –°–≤–æ–¥–∫–∞", padding="10")
        summary_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.results_summary = tk.Text(summary_frame, height=5, wrap=tk.WORD)
        self.results_summary.pack(fill=tk.BOTH, expand=True)

    def create_forecast_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        main_frame = ttk.Frame(self.forecast_tab, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –í—ã–±–æ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        selection_frame = ttk.LabelFrame(main_frame, text="üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞", padding="10")
        selection_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        ttk.Label(selection_frame, text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.forecast_crypto = ttk.Combobox(selection_frame, state="readonly", width=20)
        self.forecast_crypto.grid(row=0, column=1, pady=5, padx=(10, 0))
        
        # –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        ttk.Label(selection_frame, text="–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.forecast_type = ttk.Combobox(
            selection_frame,
            values=["–û–¥–Ω–∞ –º–æ–¥–µ–ª—å", "–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π"],
            state="readonly",
            width=20
        )
        self.forecast_type.set("–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π")
        self.forecast_type.grid(row=1, column=1, pady=5, padx=(10, 0))
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç
        ttk.Label(selection_frame, text="–ì–æ—Ä–∏–∑–æ–Ω—Ç (–¥–Ω–∏):").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.forecast_days = tk.IntVar(value=30)
        days_spin = ttk.Spinbox(
            selection_frame,
            from_=1,
            to=365,
            textvariable=self.forecast_days,
            width=20
        )
        days_spin.grid(row=2, column=1, pady=5, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        ttk.Button(
            selection_frame,
            text="üîÆ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
            command=self.create_forecast,
            style="Accent.TButton"
        ).grid(row=3, column=0, columnspan=2, pady=20)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
        results_frame = ttk.LabelFrame(main_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞", padding="10")
        results_frame.pack(fill=tk.BOTH, expand=True)
        
        self.forecast_text = scrolledtext.ScrolledText(
            results_frame,
            height=15,
            wrap=tk.WORD,
            font=("Consolas", 10)
        )
        self.forecast_text.pack(fill=tk.BOTH, expand=True)

    def create_strategy_section(self, parent):
        """–°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        frame = ttk.LabelFrame(parent, text="üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", padding="10")
        frame.pack(fill=tk.X, pady=(0, 10))
        
        strategies = list(PRESET_STRATEGIES.keys())
        for i, strategy in enumerate(strategies):
            btn = ttk.Button(
                frame,
                text=strategy.capitalize(),
                command=lambda s=strategy: self.apply_strategy(s),
                style="Warning.TButton" if strategy == "conservative" else "Accent.TButton"
            )
            btn.pack(fill=tk.X, pady=2)
        
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        ttk.Button(
            frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å",
            command=self.custom_strategy
        ).pack(fill=tk.X, pady=2)

    def create_macro_section(self, parent):
        """–°–µ–∫—Ü–∏—è –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        frame = ttk.LabelFrame(parent, text="üìä –ú–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", padding="10")
        frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        self.use_macro = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            frame,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
            variable=self.use_macro,
            command=self.toggle_macro,
        ).pack(anchor=tk.W, pady=(0, 5))

        # –°–ø–∏—Å–æ–∫ –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.macro_frame = ttk.Frame(frame)
        self.macro_frame.pack(fill=tk.BOTH, expand=True)

        self.macro_vars = {}
        descriptions = {
            "DXY": "–ò–Ω–¥–µ–∫—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê",
            "Gold": "–ó–æ–ª–æ—Ç–æ",
            "VIX": "–ò–Ω–¥–µ–∫—Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
            "TNX": "10-–ª–µ—Ç–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –°–®–ê",
            "Oil": "–ù–µ—Ñ—Ç—å WTI",
            "SP500": "S&P 500",
        }

        for macro, desc in descriptions.items():
            if macro in MACRO_INDICATORS:
                var = tk.BooleanVar(value=True)
                cb = ttk.Checkbutton(
                    self.macro_frame, text=f"{macro} - {desc}", variable=var
                )
                cb.pack(anchor=tk.W, pady=2)
                self.macro_vars[macro] = var
    def create_params_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        frame = ttk.LabelFrame(parent, text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", padding="10")
        frame.pack(fill=tk.X, pady=(0, 10))

        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        ttk.Label(frame, text="–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:").grid(
            row=0, column=0, sticky=tk.W, pady=5
        )
        self.period_var = tk.StringVar(value="2y")
        period_combo = ttk.Combobox(
            frame,
            textvariable=self.period_var,
            values=list(DATA_PERIODS.values()),
            state="readonly",
            width=15,
        )
        period_combo.grid(row=0, column=1, pady=5, padx=(10, 0))

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        ttk.Label(frame, text="–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏):").grid(
            row=1, column=0, sticky=tk.W, pady=5
        )
        self.forecast_var = tk.IntVar(value=30)
        forecast_spin = ttk.Spinbox(
            frame, from_=7, to=90, textvariable=self.forecast_var, width=15
        )
        forecast_spin.grid(row=1, column=1, pady=5, padx=(10, 0))

        # –≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è
        ttk.Label(frame, text="–≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è:").grid(
            row=2, column=0, sticky=tk.W, pady=5
        )
        self.epochs_var = tk.IntVar(value=100)
        epochs_spin = ttk.Spinbox(
            frame, from_=10, to=300, textvariable=self.epochs_var, width=15
        )
        epochs_spin.grid(row=2, column=1, pady=5, padx=(10, 0))

    def create_control_buttons(self, parent):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        frame = ttk.Frame(parent)
        frame.pack(fill=tk.X, pady=(0, 10))

        self.start_btn = ttk.Button(
            frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑",
            command=self.start_analysis,
            style="Accent.TButton",
        )
        self.start_btn.pack(fill=tk.X, pady=2)

        self.stop_btn = ttk.Button(
            frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_analysis, state=tk.DISABLED
        )
        self.stop_btn.pack(fill=tk.X, pady=2)

        ttk.Button(
            frame, 
            text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é", 
            command=self.load_session
        ).pack(fill=tk.X, pady=2)

        ttk.Button(
            frame, 
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
            command=self.save_settings
        ).pack(fill=tk.X, pady=2)

    def create_console(self, parent):
        """–ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞"""
        console_frame = ttk.LabelFrame(parent, text="üìã –ö–æ–Ω—Å–æ–ª—å", padding="5")
        console_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Å–æ–ª–∏
        toolbar = ttk.Frame(console_frame)
        toolbar.pack(fill=tk.X, pady=(0, 5))

        ttk.Button(
            toolbar,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=lambda: self.console.delete(1.0, tk.END)
        ).pack(side=tk.LEFT, padx=2)

        ttk.Button(
            toolbar,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥",
            command=self.save_console_log
        ).pack(side=tk.LEFT, padx=2)

        self.console = scrolledtext.ScrolledText(
            console_frame,
            height=10,
            wrap=tk.WORD,
            bg="black",
            fg="#00FF00",
            font=("Consolas", 9),
        )
        self.console.pack(fill=tk.BOTH, expand=True)

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        sys.stdout = ConsoleRedirector(self.console)

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            self.status_bar,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress = ttk.Progressbar(
            self.status_bar,
            mode='indeterminate',
            length=200
        )
        self.progress.pack(side=tk.RIGHT, padx=5)

    def toggle_macro(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        state = "normal" if self.use_macro.get() else "disabled"
        for widget in self.macro_frame.winfo_children():
            widget.configure(state=state)

    def select_all(self, vars_dict):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"""
        for var in vars_dict.values():
            var.set(True)

    def deselect_all(self, vars_dict):
        """–°–Ω—è—Ç—å –≤—Å–µ"""
        for var in vars_dict.values():
            var.set(False)

    def filter_cryptos(self, event):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.crypto_search.get().lower()
        
        for crypto, checkbox in self.crypto_checkboxes.items():
            if search_text in crypto.lower():
                checkbox.pack(anchor=tk.W, pady=2)
            else:
                checkbox.pack_forget()

    def select_top_cryptos(self):
        """–í—ã–±–æ—Ä —Ç–æ–ø-5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        top_cryptos = ["Bitcoin", "Ethereum", "Binance Coin", "Solana", "Cardano"]
        
        self.deselect_all(self.crypto_vars)
        for crypto in top_cryptos:
            if crypto in self.crypto_vars:
                self.crypto_vars[crypto].set(True)

    def apply_strategy(self, strategy_name):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        strategy = PRESET_STRATEGIES[strategy_name]
        self.current_strategy = strategy_name
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        self.deselect_all(self.model_vars)
        for model in strategy["models"]:
            if model in self.model_vars:
                self.model_vars[model].set(True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ø–æ—Ö
        self.epochs_var.set(strategy["epochs"])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        self.forecast_var.set(strategy["forecast_horizon"])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if strategy["features"] == "basic":
            for var in self.feature_vars.values():
                var.set(False)
        elif strategy["features"] == "all":
            for var in self.feature_vars.values():
                var.set(True)
        
        self.update_status(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        messagebox.showinfo("–°—Ç—Ä–∞—Ç–µ–≥–∏—è", f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}'")

    def custom_strategy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –º–æ–¥–µ–ª–µ–π
        self.notebook.select(1)
        messagebox.showinfo("–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", 
                          "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö '–ú–æ–¥–µ–ª–∏' –∏ '–ü—Ä–∏–∑–Ω–∞–∫–∏'")

    def update_model_info(self, model_name=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö"""
        self.model_info_text.delete(1.0, tk.END)
        
        selected_models = [name for name, var in self.model_vars.items() if var.get()]
        
        if not selected_models:
            self.model_info_text.insert(tk.END, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        
        info = f"–í—ã–±—Ä–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(selected_models)}\n\n"
        
        for model in selected_models:
            info += f"{'='*50}\n"
            info += f"–ú–æ–¥–µ–ª—å: {model}\n"
            info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {UI_DESCRIPTIONS['models'].get(model, '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            
            if model in MODEL_SPECIFIC_CONFIG:
                config = MODEL_SPECIFIC_CONFIG[model]
                info += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                for key, value in config.items():
                    info += f"  - {key}: {value}\n"
            
            info += "\n"
        
        self.model_info_text.insert(tk.END, info)

    def configure_model(self, model_name):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        config_window = tk.Toplevel(self.root)
        config_window.title(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {model_name}")
        config_window.geometry("400x300")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        current_config = MODEL_SPECIFIC_CONFIG.get(model_name, {})
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        row = 0
        param_vars = {}
        
        for param, value in current_config.items():
            ttk.Label(config_window, text=f"{param}:").grid(
                row=row, column=0, sticky=tk.W, padx=10, pady=5
            )
            
            if isinstance(value, bool):
                var = tk.BooleanVar(value=value)
                ttk.Checkbutton(config_window, variable=var).grid(
                    row=row, column=1, padx=10, pady=5
                )
            elif isinstance(value, int):
                var = tk.IntVar(value=value)
                ttk.Spinbox(
                    config_window, 
                    from_=1, 
                    to=1000, 
                    textvariable=var,
                    width=20
                ).grid(row=row, column=1, padx=10, pady=5)
            elif isinstance(value, float):
                var = tk.DoubleVar(value=value)
                ttk.Spinbox(
                    config_window,
                    from_=0.0,
                    to=1.0,
                    increment=0.01,
                    textvariable=var,
                    width=20
                ).grid(row=row, column=1, padx=10, pady=5)
            else:
                var = tk.StringVar(value=str(value))
                ttk.Entry(config_window, textvariable=var, width=20).grid(
                    row=row, column=1, padx=10, pady=5
                )
            
            param_vars[param] = var
            row += 1
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(config_window)
        btn_frame.grid(row=row, column=0, columnspan=2, pady=20)
        
        def save_config():
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            for param, var in param_vars.items():
                MODEL_SPECIFIC_CONFIG[model_name][param] = var.get()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            config_window.destroy()
        
        ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–û—Ç–º–µ–Ω–∞", command=config_window.destroy).pack(side=tk.LEFT, padx=5)

    def start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        # –°–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.selected_cryptos = [
            name for name, var in self.crypto_vars.items() if var.get()
        ]
        self.selected_models = [
            name for name, var in self.model_vars.items() if var.get()
        ]
        self.selected_macros = [
            name for name, var in self.macro_vars.items() if var.get()
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.selected_cryptos:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!")
            return

        if not self.selected_models:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å!")
            return

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.is_running = True
        self.start_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.progress.start()
        self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...")

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
        self.console.delete(1.0, tk.END)

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.run_analysis_thread)
        thread.daemon = True
        thread.start()

    def run_analysis_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
            print(f"üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {', '.join(self.selected_cryptos)}")
            print(f"ü§ñ –ú–æ–¥–µ–ª–∏: {', '.join(self.selected_models)}")
            print(
                f"üìä –ú–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {', '.join(self.selected_macros) if self.use_macro.get() else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}"
            )
            print("=" * 60)

            parameters = {
                "data_period": self.period_var.get(),
                "forecast_days": self.forecast_var.get(),
                "epochs": self.epochs_var.get(),
            }

            # –°–±–æ—Ä –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_options = {}
            for key, var in self.feature_vars.items():
                feature_options[key] = var.get()
            
            if self.use_pca.get():
                feature_options["pca_components"] = self.pca_variance.get()
            else:
                feature_options["pca_components"] = None
            
            if self.use_selection.get():
                feature_options["n_features"] = self.n_features.get()
            else:
                feature_options["n_features"] = None

            self.interface.run_analysis(
                self.selected_cryptos,
                self.selected_models,
                self.use_macro.get(),
                self.selected_macros,
                parameters,
                feature_options
            )

            print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.update_status("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.root.after(0, self.refresh_results)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            self.root.after(0, self.update_forecast_cryptos)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            self.update_status(f"–û—à–∏–±–∫–∞: {str(e)[:50]}...")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")

        finally:
            self.is_running = False
            self.start_btn.config(state=tk.NORMAL)
            self.stop_btn.config(state=tk.DISABLED)
            self.progress.stop()

    def stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑?"):
            self.is_running = False
            print("\n‚èπ –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.update_status("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def refresh_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if self.interface.session_results:
            for crypto_name, results in self.interface.session_results.items():
                for model_key, metrics in results.get("metrics", {}).items():
                    model_type = model_key.split("_", 1)[1]
                    
                    self.results_tree.insert("", "end", values=(
                        crypto_name,
                        model_type,
                        f"{metrics['RMSE']:.2f}",
                        f"{metrics['MAE']:.2f}",
                        f"{metrics['R2']:.4f}",
                        f"{metrics['Directional_Accuracy']:.1f}%"
                    ))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
            self.update_results_summary()

    def update_results_summary(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_summary.delete(1.0, tk.END)
        
        if not self.interface.session_results:
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_models = sum(
            len(results["metrics"]) for results in self.interface.session_results.values()
        )
        
        # –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        best_model = None
        best_rmse = float('inf')
        
        for crypto_name, results in self.interface.session_results.items():
            for model_key, metrics in results["metrics"].items():
                if metrics["RMSE"] < best_rmse:
                    best_rmse = metrics["RMSE"]
                    best_model = (crypto_name, model_key.split("_", 1)[1])
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–≤–æ–¥–∫–∏
        summary = f"–í—Å–µ–≥–æ –æ–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {total_models}\n"
        summary += f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(self.interface.session_results)}\n"
        
        if best_model:
            summary += f"\n–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model[1]} –¥–ª—è {best_model[0]}\n"
            summary += f"RMSE: ${best_rmse:.2f}\n"
        
        if self.current_strategy:
            summary += f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy}"
        
        self.results_summary.insert(tk.END, summary)

    def show_detailed_analysis(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        selected = self.results_tree.selection()
        
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        values = self.results_tree.item(selected[0])['values']
        crypto_name = values[0]
        model_type = values[1]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        detail_window = tk.Toplevel(self.root)
        detail_window.title(f"–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {crypto_name} - {model_type}")
        detail_window.geometry("800x600")
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        text = scrolledtext.ScrolledText(detail_window, wrap=tk.WORD)
        text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        model_key = f"{crypto_name}_{model_type}"
        
        if crypto_name in self.interface.session_results:
            results = self.interface.session_results[crypto_name]
            metrics = results["metrics"].get(model_key, {})
            
            report = f"–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó\n{'='*50}\n\n"
            report += f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_name}\n"
            report += f"–ú–æ–¥–µ–ª—å: {model_type}\n\n"
            
            report += f"–ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê:\n{'-'*30}\n"
            for metric, value in metrics.items():
                report += f"{metric}: {value:.4f}\n"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if "predictions" in results and model_key in results["predictions"]:
                pred_data = results["predictions"][model_key]
                report += f"\n\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:\n{'-'*30}\n"
                report += f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(pred_data.get('train_pred', []))}\n"
                report += f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {len(pred_data.get('test_pred', []))}\n"
            
            text.insert(tk.END, report)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(
            detail_window,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=detail_window.destroy
        ).pack(pady=10)

    def update_forecast_cryptos(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        if self.interface.model_builder.models:
            cryptos = list(set(
                key.split('_')[0] for key in self.interface.model_builder.models.keys()
            ))
            self.forecast_crypto['values'] = cryptos
            if cryptos:
                self.forecast_crypto.set(cryptos[0])

    def create_forecast(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        crypto = self.forecast_crypto.get()
        if not crypto:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
            return
        
        self.forecast_text.delete(1.0, tk.END)
        self.forecast_text.insert(tk.END, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...\n")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(
            target=self.create_forecast_thread,
            args=(crypto,)
        )
        thread.daemon = True
        thread.start()

    def create_forecast_thread(self, crypto_name):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            forecast_type = self.forecast_type.get()
            days = self.forecast_days.get()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.update_forecast_status("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            crypto_data = self.interface.data_loader.fetch_crypto_data([crypto_name], "1y")
            features_df = self.interface.data_loader.prepare_features(crypto_name)
            
            if forecast_type == "–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π":
                self.update_forecast_status("–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
                dates, values, info = self.interface.model_builder.ensemble_predict(
                    crypto_name, features_df, days
                )
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                report = self.format_ensemble_forecast_report(
                    crypto_name, dates, values, info, features_df['Close'].iloc[-1]
                )
            else:
                # –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
                available_models = [
                    key.split('_', 1)[1] for key in self.interface.model_builder.models.keys()
                    if key.startswith(crypto_name)
                ]
                
                if not available_models:
                    raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º RMSE
                best_model = min(
                    available_models,
                    key=lambda m: self.interface.session_results[crypto_name]["metrics"][f"{crypto_name}_{m}"]["RMSE"]
                )
                
                self.update_forecast_status(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø–æ–º–æ—â—å—é {best_model}...")
                dates, values = self.interface.model_builder.create_forecast(
                    crypto_name, best_model, features_df, days
                )
                
                report = self.format_single_forecast_report(
                    crypto_name, best_model, dates, values, features_df['Close'].iloc[-1]
                )
            
            self.update_forecast_status(report)
            
        except Exception as e:
            self.update_forecast_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def format_ensemble_forecast_report(self, crypto_name, dates, values, info, current_price):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        report = f"–ê–ù–°–ê–ú–ë–õ–ï–í–´–ô –ü–†–û–ì–ù–û–ó –î–õ–Ø {crypto_name}\n{'='*60}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        final_price = values[-1]
        change_pct = ((final_price - current_price) / current_price) * 100
        
        report += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\n"
        report += f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {dates[-1].strftime('%d.%m.%Y')}: ${final_price:.2f}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.2f}%\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≤–µ—Å–∞
        report += "–ú–û–î–ï–õ–ò –ò –í–ï–°–ê:\n"
        for model, weight in info['weights'].items():
            report += f"  - {model}: {weight:.3f}\n"
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        report += f"\n95% –î–û–í–ï–†–ò–¢–ï–õ–¨–ù–´–ô –ò–ù–¢–ï–†–í–ê–õ:\n"
        report += f"  –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ${info['confidence_intervals']['lower_95'][-1]:.2f}\n"
        report += f"  –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: ${info['confidence_intervals']['upper_95'][-1]:.2f}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ì–ù–û–ó–ê:\n"
        report += f"  –ú–∞–∫—Å–∏–º—É–º: ${np.max(values):.2f}\n"
        report += f"  –ú–∏–Ω–∏–º—É–º: ${np.min(values):.2f}\n"
        report += f"  –°—Ä–µ–¥–Ω–µ–µ: ${np.mean(values):.2f}\n"
        report += f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {np.std(values)/np.mean(values)*100:.1f}%\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += "\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if change_pct > 10:
            report += "‚úÖ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏.\n"
        elif change_pct > 5:
            report += "‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n"
        elif change_pct > -5:
            report += "‚ö†Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∂–∏–¥–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.\n"
        else:
            report += "‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏.\n"
        
        return report

    def format_single_forecast_report(self, crypto_name, model_type, dates, values, current_price):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        report = f"–ü–†–û–ì–ù–û–ó {model_type} –î–õ–Ø {crypto_name}\n{'='*60}\n\n"
        
        final_price = values[-1]
        change_pct = ((final_price - current_price) / current_price) * 100
        
        report += f"–ú–æ–¥–µ–ª—å: {model_type}\n"
        report += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}\n"
        report += f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {dates[-1].strftime('%d.%m.%Y')}: ${final_price:.2f}\n"
        report += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.2f}%\n\n"
        
        report += f"–î–ò–ê–ü–ê–ó–û–ù –ü–†–û–ì–ù–û–ó–ê:\n"
        report += f"  –ú–∞–∫—Å–∏–º—É–º: ${np.max(values):.2f}\n"
        report += f"  –ú–∏–Ω–∏–º—É–º: ${np.min(values):.2f}\n"
        report += f"  –°—Ä–µ–¥–Ω–µ–µ: ${np.mean(values):.2f}\n"
        
        return report

    def update_forecast_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        self.root.after(0, lambda: self.forecast_text.insert(tk.END, f"\n{message}"))

    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.interface.session_results:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            from utils import FileManager
            
            # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[
                    ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                    ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                    ("JSON —Ñ–∞–π–ª—ã", "*.json")
                ]
            )
            
            if file_path:
                if file_path.endswith('.xlsx'):
                    FileManager.export_results_to_excel(
                        self.interface.session_results,
                        file_path
                    )
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{e}")

    def save_console_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        log_text = self.console.get(1.0, tk.END)
        
        if not log_text.strip():
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ö–æ–Ω—Å–æ–ª—å –ø—É—Å—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(log_text)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞:\n{e}")

    def load_session(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        file_path = filedialog.askopenfilename(
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    session_data = json.load(f)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.process_loaded_session(session_data)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:\n{e}")

    def process_loaded_session(self, session_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if 'parameters' in session_data:
            params = session_data['parameters']
            if 'data_period' in params:
                self.period_var.set(params['data_period'])
            if 'forecast_days' in params:
                self.forecast_var.set(params['forecast_days'])
            if 'epochs' in params:
                self.epochs_var.set(params['epochs'])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'results' in session_data:
            print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è –æ—Ç {session_data.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {len(session_data['results'])} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings = {
            'cryptos': [name for name, var in self.crypto_vars.items() if var.get()],
            'models': [name for name, var in self.model_vars.items() if var.get()],
            'macros': [name for name, var in self.macro_vars.items() if var.get()],
            'use_macro': self.use_macro.get(),
            'period': self.period_var.get(),
            'forecast_days': self.forecast_var.get(),
            'epochs': self.epochs_var.get(),
            'features': {key: var.get() for key, var in self.feature_vars.items()},
            'use_pca': self.use_pca.get(),
            'pca_variance': self.pca_variance.get(),
            'use_selection': self.use_selection.get(),
            'n_features': self.n_features.get(),
            'current_strategy': self.current_strategy
        }
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, indent=4, ensure_ascii=False)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{e}")

    def load_last_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        settings_file = Path("last_settings.json")
        
        if settings_file.exists():
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if 'cryptos' in settings:
                    for crypto in settings['cryptos']:
                        if crypto in self.crypto_vars:
                            self.crypto_vars[crypto].set(True)
                
                if 'models' in settings:
                    for model in settings['models']:
                        if model in self.model_vars:
                            self.model_vars[model].set(True)
                
                if 'period' in settings:
                    self.period_var.set(settings['period'])
                
                if 'epochs' in settings:
                    self.epochs_var.set(settings['epochs'])
                
                print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.status_label.config(text=message)
        self.root.update()

    def on_closing(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            settings = {
                'cryptos': [name for name, var in self.crypto_vars.items() if var.get()],
                'models': [name for name, var in self.model_vars.items() if var.get()],
                'period': self.period_var.get(),
                'epochs': self.epochs_var.get(),
            }
            
            with open("last_settings.json", 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=4)
        except:
            pass
        
        self.root.destroy()


class ConsoleRedirector:
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""

    def __init__(self, text_widget):
        self.text_widget = text_widget

    def write(self, text):
        self.text_widget.insert(tk.END, text)
        self.text_widget.see(tk.END)
        self.text_widget.update()

    def flush(self):
        pass


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    create_project_structure()

    # –°–æ–∑–¥–∞–Ω–∏–µ GUI
    root = tk.Tk()
    app = CryptoGUI(root)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f'{width}x{height}+{x}+{y}')
    
    root.mainloop()


if __name__ == "__main__":
    main()            