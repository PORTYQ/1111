"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
import numpy as np
import pandas as pd
import json
import logging
from typing import Dict, List, Tuple, Optional
from datetime import datetime
from data_loader import DataLoader
from models import ModelBuilder
from visualizer import Visualizer
from feature_engineering import AdvancedFeatureEngineering
from config import (
    CRYPTO_SYMBOLS,
    MACRO_INDICATORS,
    DATA_PERIODS,
    FORECAST_HORIZONS,
    DIRS,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CryptoPredictorInterface:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""

    def __init__(self):
        self.data_loader = DataLoader()
        self.model_builder = ModelBuilder()
        self.visualizer = Visualizer()
        self.feature_engineer = AdvancedFeatureEngineering()
        self.session_results = {}
        self.available_models = ["LSTM", "GRU", "LSTM_ADVANCED", "TRANSFORMER", "CNN_LSTM"]

    def display_welcome_message(self):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("=" * 60)
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢ V2.0 üöÄ")
        print("=" * 60)
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        print("–¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!")
        print("\n–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("‚ú® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π (Transformer, CNN-LSTM)")
        print("‚ú® –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (100+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)")
        print("‚ú® –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏")
        print("‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("=" * 60)
        print()

    def select_models(self) -> List[str]:
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print("\nü§ñ –í–´–ë–û–† –ú–û–î–ï–õ–ï–ô")
        print("-" * 30)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        model_descriptions = {
            "LSTM": "–ë–∞–∑–æ–≤–∞—è LSTM - –±—ã—Å—Ç—Ä–∞—è, –Ω–∞–¥–µ–∂–Ω–∞—è",
            "GRU": "–ë–∞–∑–æ–≤–∞—è GRU - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ LSTM",
            "LSTM_ADVANCED": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è LSTM —Å Attention - –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
            "TRANSFORMER": "Transformer - –ø–µ—Ä–µ–¥–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "CNN_LSTM": "CNN-LSTM –≥–∏–±—Ä–∏–¥ - –∑–∞—Ö–≤–∞—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
        }
        
        for i, (model, desc) in enumerate(model_descriptions.items(), 1):
            print(f"{i}. {model} - {desc}")
        
        print(f"{len(model_descriptions) + 1}. –í—Å–µ –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (LSTM, GRU)")
        print(f"{len(model_descriptions) + 2}. –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏")
        print(f"{len(model_descriptions) + 3}. –í—Å–µ –º–æ–¥–µ–ª–∏")

        while True:
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ (–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ")
                
                if choice.strip() == str(len(model_descriptions) + 1):
                    return ["LSTM", "GRU"]
                elif choice.strip() == str(len(model_descriptions) + 2):
                    return ["LSTM_ADVANCED", "TRANSFORMER", "CNN_LSTM"]
                elif choice.strip() == str(len(model_descriptions) + 3):
                    return list(model_descriptions.keys())
                
                indices = [int(x.strip()) - 1 for x in choice.split(",")]
                selected = [
                    list(model_descriptions.keys())[i] 
                    for i in indices 
                    if 0 <= i < len(model_descriptions)
                ]
                
                if selected:
                    print(f"–í—ã–±—Ä–∞–Ω—ã: {', '.join(selected)}")
                    return selected
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    def select_feature_engineering_options(self) -> Dict:
        """–í—ã–±–æ—Ä –æ–ø—Ü–∏–π –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        print("\nüõ†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–ñ–ï–ù–ï–†–ò–ò –ü–†–ò–ó–ù–ê–ö–û–í")
        print("-" * 30)
        
        options = {}
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        feature_groups = {
            "microstructure": "–ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞ (spread, VPIN, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å)",
            "sentiment": "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (Fear & Greed –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)",
            "whale": "–î–µ—Ç–µ–∫—Ü–∏—è –∫–∏—Ç–æ–≤ –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π",
            "regime": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤",
            "network": "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏",
            "cyclical": "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–§—É—Ä—å–µ –∞–Ω–∞–ª–∏–∑)"
        }
        
        for key, desc in feature_groups.items():
            use = input(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {desc}? (y/n): ").lower() == 'y'
            options[f"use_{key}"] = use
        
        # PCA
        use_pca = input("\n–ü—Ä–∏–º–µ–Ω–∏—Ç—å PCA –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏? (y/n): ").lower() == 'y'
        if use_pca:
            n_components = input("–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (0.95 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ")
            options["pca_components"] = float(n_components) if n_components else 0.95
        else:
            options["pca_components"] = None
        
        # –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        use_selection = input("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤? (y/n): ").lower() == 'y'
        if use_selection:
            n_features = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ")
            options["n_features"] = int(n_features) if n_features else 100
        else:
            options["n_features"] = None
        
        return options

    def select_cryptocurrencies(self) -> List[str]:
        """–í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüìà –í–´–ë–û–† –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢")
        print("-" * 30)

        crypto_list = list(CRYPTO_SYMBOLS.keys())

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:")
        for i, crypto in enumerate(crypto_list, 1):
            print(f"{i:2d}. {crypto}")

        print(f"{len(crypto_list) + 1:2d}. –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")

        while True:
            try:
                choice = input(
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): "
                )

                if choice.strip() == str(len(crypto_list) + 1):
                    return crypto_list

                indices = [int(x.strip()) - 1 for x in choice.split(",")]
                selected = [
                    crypto_list[i] for i in indices if 0 <= i < len(crypto_list)
                ]

                if selected:
                    print(f"–í—ã–±—Ä–∞–Ω—ã: {', '.join(selected)}")
                    return selected
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    def run_analysis(
        self,
        cryptocurrencies: List[str],
        models: List[str],
        use_macro: bool,
        macro_indicators: List[str],
        parameters: Dict,
        feature_options: Dict = None
    ):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        print("\nüîÑ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 50)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        crypto_data = self.data_loader.fetch_crypto_data(
            cryptocurrencies, parameters["data_period"]
        )

        if use_macro:
            macro_data = self.data_loader.fetch_macro_data(
                macro_indicators, parameters["data_period"]
            )
        else:
            macro_data = {}

        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        for crypto_name in cryptocurrencies:
            if crypto_name not in crypto_data:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {crypto_name} - –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                continue

            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {crypto_name}")
            print("-" * 40)

            try:
                # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                features_df = self.data_loader.prepare_features(crypto_name, use_macro)
                
                # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                if feature_options:
                    print("üõ†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
                    features_df = self._apply_advanced_features(
                        crypto_name, features_df, crypto_data, feature_options
                    )

                print(
                    f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(features_df)} –∑–∞–ø–∏—Å–µ–π —Å {len(features_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"
                )

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                self._create_analysis_visualizations(crypto_name, crypto_data, features_df)

                crypto_results = {
                    "features_df": features_df,
                    "models": {},
                    "predictions": {},
                    "metrics": {},
                }

                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
                for model_type in models:
                    print(f"\nüöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}...")

                    result = self.model_builder.train_model(
                        crypto_name,
                        model_type,
                        features_df,
                        epochs=parameters["epochs"],
                    )

                    model_key = f"{crypto_name}_{model_type}"
                    crypto_results["models"][model_type] = result["model"]
                    crypto_results["predictions"][model_key] = result["predictions"]
                    crypto_results["metrics"][model_key] = result["metrics"]

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    self._create_model_visualizations(
                        crypto_name, model_type, result, crypto_data
                    )

                    # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
                    self._print_metrics(result["metrics"], crypto_name, model_type)

                # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
                if len(models) > 1:
                    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {crypto_name}...")
                    self._create_ensemble_forecast(
                        crypto_name, features_df, models, parameters["forecast_days"]
                    )

                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
                if len(models) > 1:
                    print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {crypto_name}...")
                    self._compare_and_visualize_models(crypto_name, crypto_results)

                self.session_results[crypto_name] = crypto_results

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {crypto_name}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {crypto_name}: {e}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        self._save_session_results(parameters, feature_options)

        print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 50)
        self._print_session_summary()

    def _apply_advanced_features(
        self, crypto_name: str, features_df: pd.DataFrame, 
        crypto_data: Dict, feature_options: Dict
    ) -> pd.DataFrame:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        advanced_features = []
        
        if feature_options.get("use_microstructure", False):
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            microstructure = self.feature_engineer.create_market_microstructure_features(
                crypto_data[crypto_name]
            )
            advanced_features.append(microstructure)
        
        if feature_options.get("use_sentiment", False):
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
            sentiment = self.feature_engineer.create_sentiment_features(
                crypto_data[crypto_name]
            )
            advanced_features.append(sentiment)
        
        if feature_options.get("use_whale", False):
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–∏—Ç–æ–≤...")
            whale = self.feature_engineer.create_whale_detection_features(
                crypto_data[crypto_name]
            )
            advanced_features.append(whale)
        
        if feature_options.get("use_regime", False):
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            regime = self.feature_engineer.create_regime_features(
                crypto_data[crypto_name]
            )
            advanced_features.append(regime)
        
        if feature_options.get("use_network", False) and len(crypto_data) > 1:
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            other_cryptos = {k: v for k, v in crypto_data.items() if k != crypto_name}
            network = self.feature_engineer.create_network_features(
                crypto_data[crypto_name], other_cryptos
            )
            advanced_features.append(network)
        
        if feature_options.get("use_cyclical", False):
            print("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            cyclical = self.feature_engineer.create_cyclical_features(
                crypto_data[crypto_name]
            )
            advanced_features.append(cyclical)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if advanced_features:
            all_features = pd.concat([features_df] + advanced_features, axis=1)
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç NaN
            all_features = all_features.replace([np.inf, -np.inf], np.nan)
            all_features = all_features.fillna(method='ffill').fillna(0)
            
            # –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if feature_options.get("n_features"):
                print(f"  - –û—Ç–±–æ—Ä {feature_options['n_features']} –ª—É—á—à–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
                all_features = self.feature_engineer.apply_feature_selection(
                    all_features, all_features['Close'], feature_options['n_features']
                )
            
            # PCA
            if feature_options.get("pca_components"):
                print(f"  - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ PCA...")
                pca_features = self.feature_engineer.apply_pca_transformation(
                    all_features.drop('Close', axis=1), 
                    feature_options['pca_components']
                )
                all_features = pd.concat([all_features[['Close']], pca_features], axis=1)
            
            return all_features
        
        return features_df

    def _create_analysis_visualizations(
        self, crypto_name: str, crypto_data: Dict, features_df: pd.DataFrame
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        price_fig = self.visualizer.plot_price_history(crypto_data, crypto_name)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importance_fig = self.visualizer.plot_feature_importance(features_df, crypto_name)

    def _create_model_visualizations(
        self, crypto_name: str, model_type: str, result: Dict, crypto_data: Dict
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏"""
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        pred_fig = self.visualizer.plot_predictions(
            result["predictions"], crypto_name, model_type
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        training_fig = self.visualizer.plot_training_history(
            result["history"], crypto_name, model_type
        )

    def _create_ensemble_forecast(
        self, crypto_name: str, features_df: pd.DataFrame, 
        models: List[str], days_ahead: int
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            dates, ensemble_forecast, ensemble_info = self.model_builder.ensemble_predict(
                crypto_name, features_df, days_ahead, models
            )
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            fig = self.visualizer.plot_ensemble_forecast(
                features_df['Close'],
                dates,
                ensemble_forecast,
                ensemble_info['confidence_intervals'],
                crypto_name
            )
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            print(f"\nüìä –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑:")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models)}")
            print(f"   –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π:")
            for model, weight in ensemble_info['weights'].items():
                print(f"     - {model}: {weight:.3f}")
            
            current_price = features_df['Close'].iloc[-1]
            final_price = ensemble_forecast[-1]
            change_percent = ((final_price - current_price) / current_price) * 100
            
            print(f"   –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days_ahead} –¥–Ω–µ–π:")
            print(f"     –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
            print(f"     –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞: ${final_price:.2f}")
            print(f"     –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.2f}%")
            print(f"     95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: "
                  f"${ensemble_info['confidence_intervals']['lower_95'][-1]:.2f} - "
                  f"${ensemble_info['confidence_intervals']['upper_95'][-1]:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def _compare_and_visualize_models(self, crypto_name: str, crypto_results: Dict):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
        comparison_fig = self.visualizer.plot_model_comparison(
            crypto_results["metrics"], crypto_name
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        summary_fig = self.visualizer.create_summary_dashboard(
            crypto_name,
            crypto_results["predictions"],
            crypto_results["metrics"],
        )
        
        self._print_model_comparison(crypto_results["metrics"], crypto_name)

    def _print_metrics(self, metrics: Dict, crypto_name: str, model_type: str):
        """–í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏"""
        print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ {model_type} –¥–ª—è {crypto_name}:")
        print(f"   RMSE: ${metrics['RMSE']:.2f}")
        print(f"   MAE:  ${metrics['MAE']:.2f}")
        print(f"   R¬≤:   {metrics['R2']:.4f}")
        print(f"   MAPE: {metrics['MAPE']:.2f}%")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {metrics['Directional_Accuracy']:.1f}%")

    def _print_model_comparison(self, metrics_dict: Dict, crypto_name: str):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {crypto_name}:")
        print("-" * 80)
        print(
            f"{'–ú–æ–¥–µ–ª—å':<15} {'RMSE':<10} {'MAE':<10} {'R¬≤':<8} {'MAPE':<8} {'–¢–æ—á–Ω–æ—Å—Ç—å':<10}"
        )
        print("-" * 80)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ RMSE
        sorted_models = sorted(metrics_dict.items(), key=lambda x: x[1]['RMSE'])
        
        for model_key, metrics in sorted_models:
            model_type = model_key.split("_", 1)[1]
            print(
                f"{model_type:<15} "
                f"${metrics['RMSE']:<9.2f} "
                f"${metrics['MAE']:<9.2f} "
                f"{metrics['R2']:<7.4f} "
                f"{metrics['MAPE']:<7.1f}% "
                f"{metrics['Directional_Accuracy']:<9.1f}%"
            )

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        best_model = sorted_models[0]
        best_type = best_model[0].split("_", 1)[1]
        print(f"\nüèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ RMSE: {best_type}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_r2 = best_model[1]['R2']
        if best_r2 > 0.85:
            recommendation = "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
        elif best_r2 > 0.70:
            recommendation = "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è."
        elif best_r2 > 0.50:
            recommendation = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
        else:
            recommendation = "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö."
        
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")

    def _save_session_results(self, parameters: Dict, feature_options: Dict = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        session_data = {
            "timestamp": timestamp, 
            "parameters": parameters,
            "feature_options": feature_options,
            "results": {}
        }

        for crypto_name, results in self.session_results.items():
            session_data["results"][crypto_name] = {
                "metrics": results["metrics"],
                "data_info": self.data_loader.get_data_info(crypto_name),
                "models_used": list(results["models"].keys())
            }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        session_file = DIRS["metrics"] / f"session_{timestamp}.json"
        with open(session_file, "w", encoding="utf-8") as f:
            json.dump(session_data, f, indent=4, ensure_ascii=False, default=str)

        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {session_file}")

    def _print_session_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Å–µ—Å—Å–∏–∏"""
        print(f"\nüìã –ò–¢–û–ì–ò –°–ï–°–°–ò–ò")
        print("-" * 30)
        print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {len(self.session_results)}")

        total_models = sum(
            len(results["models"]) for results in self.session_results.values()
        )
        print(f"–û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {total_models}")

        # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ –≤—Å–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
        best_overall = None
        best_rmse = float('inf')
        
        for crypto_name, results in self.session_results.items():
            for model_key, metrics in results["metrics"].items():
                if metrics["RMSE"] < best_rmse:
                    best_rmse = metrics["RMSE"]
                    best_overall = (crypto_name, model_key.split("_", 1)[1])
        
        if best_overall:
            print(f"\nüèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å overall: {best_overall[1]} –¥–ª—è {best_overall[0]}")
            print(f"   RMSE: ${best_rmse:.2f}")

        print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
        print(f"   üìä –ú–æ–¥–µ–ª–∏: {DIRS['models']}")
        print(f"   üìà –ì—Ä–∞—Ñ–∏–∫–∏: {DIRS['plots']}")
        print(f"   üìã –ú–µ—Ç—Ä–∏–∫–∏: {DIRS['metrics']}")
        print(f"   üìÑ –î–∞—Ç–∞—Å–µ—Ç—ã: {DIRS['datasets']}")

    def select_macro_indicators(self) -> Tuple[bool, List[str]]:
        """–í—ã–±–æ—Ä –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        print("\nüìä –ú–ê–ö–†–û–ü–û–ö–ê–ó–ê–¢–ï–õ–ò")
        print("-" * 30)

        use_macro = input("–í–∫–ª—é—á–∏—Ç—å –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑? (y/n): ").lower() == "y"

        if not use_macro:
            return False, []

        macro_list = list(MACRO_INDICATORS.keys())

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–∫—Ä–æ–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        for i, indicator in enumerate(macro_list, 1):
            description = {
                "DXY": "–ò–Ω–¥–µ–∫—Å –¥–æ–ª–ª–∞—Ä–∞ –°–®–ê",
                "Gold": "–ó–æ–ª–æ—Ç–æ",
                "VIX": "–ò–Ω–¥–µ–∫—Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏",
                "TNX": "10-–ª–µ—Ç–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –°–®–ê",
            }
            print(f"{i:2d}. {indicator} - {description.get(indicator, '')}")

        print(f"{len(macro_list) + 1:2d}. –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

        while True:
            try:
                choice = input(
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): "
                )

                if choice.strip() == str(len(macro_list) + 1):
                    return True, macro_list

                indices = [int(x.strip()) - 1 for x in choice.split(",")]
                selected = [macro_list[i] for i in indices if 0 <= i < len(macro_list)]

                if selected:
                    print(f"–í—ã–±—Ä–∞–Ω—ã: {', '.join(selected)}")
                    return True, selected
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    def select_parameters(self) -> Dict:
        """–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        print("\n‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø")
        print("-" * 30)

        # –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        print("–ü–µ—Ä–∏–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
        periods = list(DATA_PERIODS.keys())
        for i, period in enumerate(periods, 1):
            print(f"{i}. {period}")

        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: ")) - 1
                if 0 <= choice < len(periods):
                    data_period = DATA_PERIODS[periods[choice]]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
        horizons = list(FORECAST_HORIZONS.keys())
        for i, horizon in enumerate(horizons, 1):
            print(f"{i}. {horizon}")

        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç: ")) - 1
                if 0 <= choice < len(horizons):
                    forecast_days = FORECAST_HORIZONS[horizons[choice]]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
        while True:
            try:
                epochs = int(
                    input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ") or "100"
                )
                if epochs > 0:
                    break
                else:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        return {
            "data_period": data_period,
            "forecast_days": forecast_days,
            "epochs": epochs,
        }

    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.display_welcome_message()

        while True:
            print("\nüéØ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print("-" * 20)
            print("1. üöÄ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            print("2. üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é")
            print("3. üîÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
            print("4. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print("5. üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
            print("6. ‚ùå –í—ã—Ö–æ–¥")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == "1":
                self._run_new_analysis()
            elif choice == "2":
                self.load_previous_session()
            elif choice == "3":
                self.interactive_forecast()
            elif choice == "4":
                self._view_results()
            elif choice == "5":
                self._create_custom_forecast()
            elif choice == "6":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    def _run_new_analysis(self):
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        cryptocurrencies = self.select_cryptocurrencies()
        use_macro, macro_indicators = self.select_macro_indicators()
        models = self.select_models()
        parameters = self.select_parameters()
        feature_options = self.select_feature_engineering_options()

        self.run_analysis(
            cryptocurrencies, models, use_macro, macro_indicators, 
            parameters, feature_options
        )

    def _create_custom_forecast(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print("\nüé® –ö–ê–°–¢–û–ú–ù–´–ô –ü–†–û–ì–ù–û–ó")
        print("-" * 40)
        
        if not self.model_builder.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
            return
        
        # –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        available_cryptos = list(set(key.split('_')[0] for key in self.model_builder.models.keys()))
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:")
        for i, crypto in enumerate(available_cryptos, 1):
            print(f"{i}. {crypto}")
        
        while True:
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: ")) - 1
                if 0 <= choice < len(available_cryptos):
                    crypto_name = available_cryptos[choice]
                    break
            except ValueError:
                pass
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        print("\n–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞:")
        print("1. –û–¥–Ω–∞ –º–æ–¥–µ–ª—å")
        print("2. –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        
        forecast_type = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1/2): ")
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        days = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-365): "))
        days = max(1, min(365, days))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        crypto_data = self.data_loader.fetch_crypto_data([crypto_name], "1y")
        features_df = self.data_loader.prepare_features(crypto_name)
        
        if forecast_type == "1":
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            available_models = [key.split('_', 1)[1] for key in self.model_builder.models.keys() 
                              if key.startswith(crypto_name)]
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for i, model in enumerate(available_models, 1):
                print(f"{i}. {model}")
            
            choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å: ")) - 1
            model_type = available_models[choice]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
            dates, values = self.model_builder.create_forecast(
                crypto_name, model_type, features_df, days
            )
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            fig = self.visualizer.plot_forecast(
                features_df['Close'], dates, values, crypto_name, model_type
            )
            
        else:
            # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            dates, values, info = self.model_builder.ensemble_predict(
                crypto_name, features_df, days
            )
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
            fig = self.visualizer.plot_ensemble_forecast(
                features_df['Close'], dates, values, 
                info['confidence_intervals'], crypto_name
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        self._print_forecast_statistics(dates, values, features_df['Close'].iloc[-1])

    def _print_forecast_statistics(self, dates, values, current_price):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ì–ù–û–ó–ê")
        print("-" * 40)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        final_price = values[-1]
        max_price = np.max(values)
        min_price = np.min(values)
        avg_price = np.mean(values)
        
        change_pct = ((final_price - current_price) / current_price) * 100
        max_gain = ((max_price - current_price) / current_price) * 100
        max_loss = ((min_price - current_price) / current_price) * 100
        
        print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        print(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {dates[-1].strftime('%d.%m.%Y')}: ${final_price:.2f}")
        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.2f}%")
        print(f"\n–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞:")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: ${max_price:.2f} ({max_gain:+.2f}%)")
        print(f"  –ú–∏–Ω–∏–º—É–º: ${min_price:.2f} ({max_loss:+.2f}%)")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: ${avg_price:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        mid_point = len(values) // 2
        first_half_avg = np.mean(values[:mid_point])
        second_half_avg = np.mean(values[mid_point:])
        
        if second_half_avg > first_half_avg * 1.02:
            trend = "üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        elif second_half_avg < first_half_avg * 0.98:
            trend = "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        else:
            trend = "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥"
        
        print(f"\n–û–±—â–∏–π —Ç—Ä–µ–Ω–¥: {trend}")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
        volatility = np.std(values) / np.mean(values) * 100
        print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {volatility:.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if change_pct > 10:
            print("‚úÖ –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏.")
        elif change_pct > 5:
            print("‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.")
        elif change_pct > -5:
            print("‚ö†Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∂–∏–¥–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.")
        else:
            print("‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        if volatility > 20:
            print("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã.")

    def interactive_forecast(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        print("\nüîÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ü–†–û–ì–ù–û–ó")
        print("-" * 40)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if not self.model_builder.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
            return

        available_models = list(self.model_builder.models.keys())
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for i, model_key in enumerate(available_models, 1):
            crypto_name, model_type = model_key.split("_", 1)
            print(f"{i}. {crypto_name} - {model_type}")

        while True:
            try:
                choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–æ–º–µ—Ä): ")) - 1
                if 0 <= choice < len(available_models):
                    selected_model = available_models[choice]
                    crypto_name, model_type = selected_model.split("_", 1)
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        # –í—ã–±–æ—Ä –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        horizons = list(FORECAST_HORIZONS.keys())
        print("\n–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for i, horizon in enumerate(horizons, 1):
            print(f"{i}. {horizon}")

        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç: ")) - 1
                if 0 <= choice < len(horizons):
                    forecast_days = FORECAST_HORIZONS[horizons[choice]]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if crypto_name in self.session_results:
            features_df = self.session_results[crypto_name]["features_df"]
        else:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            crypto_data = self.data_loader.fetch_crypto_data([crypto_name])
            features_df = self.data_loader.prepare_features(crypto_name)

        try:
            print(f"\nüîÆ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ {crypto_name} –Ω–∞ {forecast_days} –¥–Ω–µ–π...")
            forecast_dates, forecast_values = self.model_builder.create_forecast(
                crypto_name, model_type, features_df, forecast_days
            )

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_fig = self.visualizer.plot_forecast(
                features_df["Close"],
                forecast_dates,
                forecast_values,
                crypto_name,
                model_type,
            )

            # –í—ã–≤–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
            self._print_forecast_summary(forecast_dates, forecast_values, crypto_name)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def _print_forecast_summary(self, forecast_dates, forecast_values, crypto_name):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        current_price = forecast_values[0]
        final_price = forecast_values[-1]
        change_percent = ((final_price - current_price) / current_price) * 100

        print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {crypto_name}:")
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${final_price:.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.2f}%")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: ${max(forecast_values):.2f}")
        print(f"   –ú–∏–Ω–∏–º—É–º: ${min(forecast_values):.2f}")

        trend = "üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π" if change_percent > 0 else "üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π"
        print(f"   –¢—Ä–µ–Ω–¥: {trend}")

    def _view_results(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.session_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")
            return

        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–ö–£–©–ï–ô –°–ï–°–°–ò–ò")
        print("-" * 40)

        for crypto_name, results in self.session_results.items():
            print(f"\nü™ô {crypto_name}:")

            for model_key, metrics in results["metrics"].items():
                model_type = model_key.split("_", 1)[1]
                print(
                    f"   {model_type}: RMSE=${metrics['RMSE']:.2f}, "
                    f"R¬≤={metrics['R2']:.3f}, "
                    f"–¢–æ—á–Ω–æ—Å—Ç—å={metrics['Directional_Accuracy']:.1f}%"
                )

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def load_previous_session(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        print("\nüîÑ –ó–ê–ì–†–£–ó–ö–ê –ü–†–ï–î–´–î–£–©–ï–ô –°–ï–°–°–ò–ò")
        print("-" * 40)

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
        session_files = list(DIRS["metrics"].glob("session_*.json"))

        if not session_files:
            print("‚ùå –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        session_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
        for i, session_file in enumerate(
            session_files[:10], 1
        ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            timestamp = session_file.stem.replace("session_", "")
            formatted_time = datetime.strptime(timestamp, "%Y%m%d_%H%M%S").strftime(
                "%d.%m.%Y %H:%M"
            )
            print(f"{i}. {formatted_time}")

        while True:
            try:
                choice = input(
                    "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–æ–º–µ—Ä) –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
                )

                if choice.lower() == "n":
                    return False

                choice_idx = int(choice) - 1
                if 0 <= choice_idx < len(session_files[:10]):
                    selected_file = session_files[choice_idx]

                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
                    with open(selected_file, "r", encoding="utf-8") as f:
                        session_data = json.load(f)

                    print(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {selected_file.name}")
                    self._display_session_info(session_data)
                    return True
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'n'!")

    def _display_session_info(self, session_data: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:")
        print(f"   –í—Ä–µ–º—è: {session_data['timestamp']}")
        print(f"   –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {session_data['parameters']['data_period']}")
        print(
            f"   –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {session_data['parameters']['forecast_days']} –¥–Ω–µ–π"
        )
        print(f"   –≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è: {session_data['parameters']['epochs']}")

        if 'feature_options' in session_data:
            print(f"\n   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
            for key, value in session_data['feature_options'].items():
                if key.startswith('use_') and value:
                    feature_name = key.replace('use_', '').capitalize()
                    print(f"     ‚úì {feature_name}")

        print(f"\n   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for crypto_name, results in session_data["results"].items():
            models_count = len(results["metrics"])
            models_list = results.get("models_used", [])
            print(f"     {crypto_name}: {models_count} –º–æ–¥–µ–ª—å(–µ–π)")
            if models_list:
                print(f"       –ú–æ–¥–µ–ª–∏: {', '.join(models_list)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    interface = CryptoPredictorInterface()
    interface.run()


if __name__ == "__main__":
    main()